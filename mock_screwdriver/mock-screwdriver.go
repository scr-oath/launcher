// Code generated by MockGen. DO NOT EDIT.
// Source: screwdriver.go

// Package mock_screwdriver is a generated GoMock package.
package mock_screwdriver

import (
	gomock "github.com/golang/mock/gomock"
	screwdriver "github.com/screwdriver-cd/launcher/screwdriver"
	reflect "reflect"
)

// MockAPI is a mock of API interface
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
}

// MockAPIMockRecorder is the mock recorder for MockAPI
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// BuildFromID mocks base method
func (m *MockAPI) BuildFromID(buildID int) (screwdriver.Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildFromID", buildID)
	ret0, _ := ret[0].(screwdriver.Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildFromID indicates an expected call of BuildFromID
func (mr *MockAPIMockRecorder) BuildFromID(buildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildFromID", reflect.TypeOf((*MockAPI)(nil).BuildFromID), buildID)
}

// EventFromID mocks base method
func (m *MockAPI) EventFromID(eventID int) (screwdriver.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventFromID", eventID)
	ret0, _ := ret[0].(screwdriver.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EventFromID indicates an expected call of EventFromID
func (mr *MockAPIMockRecorder) EventFromID(eventID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventFromID", reflect.TypeOf((*MockAPI)(nil).EventFromID), eventID)
}

// JobFromID mocks base method
func (m *MockAPI) JobFromID(jobID int) (screwdriver.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JobFromID", jobID)
	ret0, _ := ret[0].(screwdriver.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JobFromID indicates an expected call of JobFromID
func (mr *MockAPIMockRecorder) JobFromID(jobID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JobFromID", reflect.TypeOf((*MockAPI)(nil).JobFromID), jobID)
}

// PipelineFromID mocks base method
func (m *MockAPI) PipelineFromID(pipelineID int) (screwdriver.Pipeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PipelineFromID", pipelineID)
	ret0, _ := ret[0].(screwdriver.Pipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PipelineFromID indicates an expected call of PipelineFromID
func (mr *MockAPIMockRecorder) PipelineFromID(pipelineID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipelineFromID", reflect.TypeOf((*MockAPI)(nil).PipelineFromID), pipelineID)
}

// UpdateBuildStatus mocks base method
func (m *MockAPI) UpdateBuildStatus(status screwdriver.BuildStatus, meta map[string]interface{}, buildID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBuildStatus", status, meta, buildID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBuildStatus indicates an expected call of UpdateBuildStatus
func (mr *MockAPIMockRecorder) UpdateBuildStatus(status, meta, buildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBuildStatus", reflect.TypeOf((*MockAPI)(nil).UpdateBuildStatus), status, meta, buildID)
}

// UpdateStepStart mocks base method
func (m *MockAPI) UpdateStepStart(buildID int, stepName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStepStart", buildID, stepName)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStepStart indicates an expected call of UpdateStepStart
func (mr *MockAPIMockRecorder) UpdateStepStart(buildID, stepName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStepStart", reflect.TypeOf((*MockAPI)(nil).UpdateStepStart), buildID, stepName)
}

// UpdateStepStop mocks base method
func (m *MockAPI) UpdateStepStop(buildID int, stepName string, exitCode int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStepStop", buildID, stepName, exitCode)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStepStop indicates an expected call of UpdateStepStop
func (mr *MockAPIMockRecorder) UpdateStepStop(buildID, stepName, exitCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStepStop", reflect.TypeOf((*MockAPI)(nil).UpdateStepStop), buildID, stepName, exitCode)
}

// SecretsForBuild mocks base method
func (m *MockAPI) SecretsForBuild(build screwdriver.Build) (screwdriver.Secrets, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecretsForBuild", build)
	ret0, _ := ret[0].(screwdriver.Secrets)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SecretsForBuild indicates an expected call of SecretsForBuild
func (mr *MockAPIMockRecorder) SecretsForBuild(build interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretsForBuild", reflect.TypeOf((*MockAPI)(nil).SecretsForBuild), build)
}

// GetAPIURL mocks base method
func (m *MockAPI) GetAPIURL() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIURL")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIURL indicates an expected call of GetAPIURL
func (mr *MockAPIMockRecorder) GetAPIURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIURL", reflect.TypeOf((*MockAPI)(nil).GetAPIURL))
}

// GetCoverageInfo mocks base method
func (m *MockAPI) GetCoverageInfo() (screwdriver.Coverage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoverageInfo")
	ret0, _ := ret[0].(screwdriver.Coverage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoverageInfo indicates an expected call of GetCoverageInfo
func (mr *MockAPIMockRecorder) GetCoverageInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoverageInfo", reflect.TypeOf((*MockAPI)(nil).GetCoverageInfo))
}

// GetBuildToken mocks base method
func (m *MockAPI) GetBuildToken(buildID, buildTimeoutMinutes int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuildToken", buildID, buildTimeoutMinutes)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuildToken indicates an expected call of GetBuildToken
func (mr *MockAPIMockRecorder) GetBuildToken(buildID, buildTimeoutMinutes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuildToken", reflect.TypeOf((*MockAPI)(nil).GetBuildToken), buildID, buildTimeoutMinutes)
}

// MockIntOrArray is a mock of IntOrArray interface
type MockIntOrArray struct {
	ctrl     *gomock.Controller
	recorder *MockIntOrArrayMockRecorder
}

// MockIntOrArrayMockRecorder is the mock recorder for MockIntOrArray
type MockIntOrArrayMockRecorder struct {
	mock *MockIntOrArray
}

// NewMockIntOrArray creates a new mock instance
func NewMockIntOrArray(ctrl *gomock.Controller) *MockIntOrArray {
	mock := &MockIntOrArray{ctrl: ctrl}
	mock.recorder = &MockIntOrArrayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIntOrArray) EXPECT() *MockIntOrArrayMockRecorder {
	return m.recorder
}
